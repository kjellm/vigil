#! /usr/bin/env ruby

require 'celluloid/autostart'
require 'dcell'
require 'erb'
require 'reel'
require 'vigil'

DCell.start :id => "vigil_web_server", :addr => "tcp://127.0.0.1:1235"

Vigil.os = Vigil::OS.new
Vigil.run_dir = File.expand_path 'run'


class Inbox
  include Celluloid
  include Celluloid::Notifications
  include Celluloid::Logger

  def notify(project, task, status)
    info "Inbox: '#{project}' '#{task}' '#{status}'"
    publish 'message_received', project, task, status
  end
end

class WebsocketHandler
  include Celluloid
  include Celluloid::Notifications
  include Celluloid::Logger

  def initialize(websocket)
    @socket = websocket
    subscribe('message_received', :message_received)
  end

  def message_received(topic, project, task, status)
    info "#{self}: #{topic}, #{project}, #{task}, #{status}"
    @socket << "#{project}.#{task}.#{status}"
  rescue Reel::SocketError
    info "Time client disconnected"
    terminate
  end
end

class WebServer < Reel::Server
  include Celluloid::Logger

  def initialize(host = "0.0.0.0", port = 1236)
    info "Web server starting on #{host}:#{port}"
    @config = Vigil::Config.new
    super(host, port, &method(:on_connection))
  end

  def on_connection(connection)
    while request = connection.request
      case request
      when Reel::Request
        route_request connection, request
      when Reel::WebSocket
        info "Received a WebSocket connection"
        route_websocket request
      end
    end
  end

  def route_request(connection, request)
    case request.url
    when "/"
      return render_index(connection)
    when /project\/.*/
      parts = request.url.split('/')
      return render_project(parts[2], connection)
    end

    info "404 Not Found: #{request.path}"
    connection.respond :not_found, "Not found"
  end

  def route_websocket(socket)
    if socket.url == "/messages"
      WebsocketHandler.new(socket)
    else
      info "Received invalid WebSocket request for: #{socket.url}"
      socket.close
    end
  end

  def render_index(connection)
    info "200 OK: /"
    projects = @config.opts["projects"].keys
    html = ERB.new(File.read("html/list.html.erb")).result(binding)
    connection.respond :ok, html
  end

  def render_project(name, connection)
    project = Vigil::ProjectRepository.new(@config).find(name)
    unless project
      info "404 Not Found: FIXME"
      return connection.respond :not_found, "Not found"
    end
    info "200 OK: /project/#{name}"
    html = ERB.new(File.read("html/project.html.erb")).result(binding)
    connection.respond :ok, html
  end
end

Inbox.supervise_as :inbox
WebServer.supervise_as :reel
sleep
